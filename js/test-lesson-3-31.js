console.log('');
console.log('tsk 3.31');

/*

Операція ... (rest) дозволяє зібрати групу незалежних елементів у нову колекцію. 
Синтаксично - це близнюк операції розподілу, але відрізнити їх просто - розподіл 
- коли ... знаходиться у правій частині операції присвоювання, а збирання - коли ... знаходиться в її лівій частині.

Повернемось до аналогії з яблуками. Якщо на підлозі лежать яблука і у нас є порожній ящик, 
то операція rest дозволить «зібрати» яблука в ящик. Водночас, оригінальні яблука залишаться на підлозі, 
а в ящику буде копія кожного яблука.

Одна зі сфер застосування операції rest - це створення функцій, які можуть приймати будь-яку кількість аргументів.

// Як оголосити параметри функції таким чином,
// щоб можна було передати будь-яку кількість аргументів?
function multiply() {
  // ...
}

multiply(1, 2);
multiply(1, 2, 3);
multiply(1, 2, 3, 4);

Якщо прибрати увесь «синтаксичний шум» і подивитися на аргументи і параметри функції, то аргументи
 знаходяться у правій частині операції присвоювання, а параметри - у лівій, тому що значення 
 аргументів присвоюються оголошеним параметрам. Отже, можна «зібрати» всі аргументи функції в один параметр,
  використовуючи операцію rest.

function multiply(...args) {
  console.log(args); // масив усіх аргументів
}

multiply(1, 2);
multiply(1, 2, 3);
multiply(1, 2, 3, 4);

Ім'я параметра може бути довільним. Найчастіше його називають args, restArgs або otherArgs - скорочено від arguments.

*/
/*
Використовуючи операцію rest, доповни код функції add() таким чином, щоб вона приймала будь-яку кількість аргументів, 
рахувала і повертала їх суму.

    Оголошена функція add
    Функція add використовує параметр args
    Для збирання аргументів у змінну args, у підписі функції використовується синтаксис ... (оператор rest)
    Виклик add(15, 27) повертає 42
    Виклик add(12, 4, 11, 48) повертає 75
    Виклик add(32, 6, 13, 19, 8) повертає 78
    Виклик add(74, 11, 62, 46, 12, 36) повертає 241

*/

// Change code below this line
function add() {
  // Change code above this line
}
